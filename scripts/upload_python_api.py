"""
Alternative Python script ƒë·ªÉ upload dataset l√™n Roboflow
S·ª≠ d·ª•ng khi CLI kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c mu·ªën control chi ti·∫øt h∆°n
"""

import os
import time
from tqdm import tqdm
from roboflow import Roboflow

# Configuration - ƒê√É C·∫¨P NH·∫¨T V·ªöI TH√îNG TIN C·ª¶A B·∫†N
API_KEY = "lde2hp1C5PxcfTaUwjox"  # Private API Key
WORKSPACE_ID = "faceshapedetect"  # Workspace ID
PROJECT_NAME = "gender-classification-uzvfc"  # Project ID

def upload_with_python_api():
    """
    Upload dataset s·ª≠ d·ª•ng Python API
    """
    
    if API_KEY == "YOUR_API_KEY_HERE":
        print("‚ùå Vui l√≤ng c·∫≠p nh·∫≠t API_KEY trong script")
        print("1. Truy c·∫≠p https://roboflow.com/settings/api")
        print("2. Copy Private API Key")
        print("3. Thay th·∫ø API_KEY trong script")
        return
    
    if WORKSPACE_ID == "YOUR_WORKSPACE_ID":
        print("‚ùå Vui l√≤ng c·∫≠p nh·∫≠t WORKSPACE_ID trong script")
        print("1. T√¨m workspace ID trong URL: https://app.roboflow.com/{WORKSPACE_ID}/")
        print("2. Thay th·∫ø WORKSPACE_ID trong script")
        return
    
    print("üöÄ B·∫Øt ƒë·∫ßu upload v·ªõi Python API...")
    
    try:
        # Initialize Roboflow
        print("üîë ƒêƒÉng nh·∫≠p Roboflow...")
        rf = Roboflow(api_key=API_KEY)
        
        # Get workspace and project
        workspace = rf.workspace(WORKSPACE_ID)
        project = workspace.project(PROJECT_NAME)
        
        print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng: {WORKSPACE_ID}/{PROJECT_NAME}")
        
        # Dataset path
        dataset_path = "roboflow_gender_dataset"
        if not os.path.exists(dataset_path):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y dataset: {dataset_path}")
            print("Vui l√≤ng ch·∫°y scripts/upload_cli.sh tr∆∞·ªõc")
            return
        
        # Upload images t·ª´ng class
        classes = ["female", "male"]
        
        for class_name in classes:
            class_path = os.path.join(dataset_path, class_name)
            if not os.path.exists(class_path):
                print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y class: {class_path}")
                continue
                
            images = [f for f in os.listdir(class_path) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            print(f"üì§ Upload {len(images)} ·∫£nh cho class '{class_name}'...")
            
            # Upload t·ª´ng ·∫£nh v·ªõi progress bar
            for img_name in tqdm(images, desc=f"Uploading {class_name}"):
                img_path = os.path.join(class_path, img_name)
                
                try:
                    # Upload image v·ªõi annotation
                    project.upload(
                        image_path=img_path,
                        annotation_name=class_name,  # Single-label classification
                        hosted=True  # Host on Roboflow
                    )
                    
                    # Rate limiting - tr√°nh spam API
                    time.sleep(0.1)  # 100ms delay
                    
                except Exception as e:
                    print(f"‚ùå L·ªói upload {img_name}: {e}")
                    continue
        
        print("‚úÖ Upload ho√†n t·∫•t!")
        print("\nüéØ B∆∞·ªõc ti·∫øp theo:")
        print("1. Truy c·∫≠p Roboflow project")
        print("2. Review uploaded images")
        print("3. Generate dataset version")
        print("4. Train model")
        
    except Exception as e:
        print(f"‚ùå L·ªói API: {e}")
        print("\nKi·ªÉm tra:")
        print("- API key c√≥ ƒë√∫ng kh√¥ng?")
        print("- Workspace ID c√≥ ƒë√∫ng kh√¥ng?") 
        print("- Project ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a?")
        print("- K·∫øt n·ªëi internet c√≥ ·ªïn ƒë·ªãnh kh√¥ng?")

def check_dataset():
    """
    Ki·ªÉm tra dataset local tr∆∞·ªõc khi upload
    """
    dataset_path = "roboflow_gender_dataset"
    
    print("üìä Ki·ªÉm tra dataset local...")
    
    if not os.path.exists(dataset_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y: {dataset_path}")
        return False
    
    classes = ["female", "male"]
    total_images = 0
    
    for class_name in classes:
        class_path = os.path.join(dataset_path, class_name)
        if os.path.exists(class_path):
            images = [f for f in os.listdir(class_path) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            count = len(images)
            total_images += count
            print(f"   {class_name}: {count} ·∫£nh")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y class: {class_path}")
            return False
    
    print(f"   Total: {total_images} ·∫£nh")
    
    # Ki·ªÉm tra data.yaml
    yaml_path = os.path.join(dataset_path, "data.yaml")
    if os.path.exists(yaml_path):
        print("‚úÖ data.yaml c√≥ s·∫µn")
    else:
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y data.yaml")
    
    return True

if __name__ == "__main__":
    print("üîç Roboflow Python API Upload")
    print("=" * 50)
    
    # Ki·ªÉm tra dataset tr∆∞·ªõc
    if not check_dataset():
        print("\n‚ùå Dataset ch∆∞a s·∫µn s√†ng. Ch·∫°y scripts/upload_cli.sh tr∆∞·ªõc.")
        exit(1)
    
    print("\n" + "=" * 50)
    print("‚ö†Ô∏è  C·∫¢NH B√ÅO: Upload qua API c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian!")
    print("V·ªõi 6,000 ·∫£nh, ∆∞·ªõc t√≠nh: 30-60 ph√∫t")
    print("Khuy·∫øn ngh·ªã: S·ª≠ d·ª•ng CLI ho·∫∑c Web Upload")
    print("=" * 50)
    
    # H·ªèi x√°c nh·∫≠n
    confirm = input("\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c v·ªõi API upload? (y/N): ")
    if confirm.lower() not in ['y', 'yes']:
        print("H·ªßy upload. S·ª≠ d·ª•ng CLI ho·∫∑c Web Upload thay th·∫ø.")
        exit(0)
    
    # Upload
    upload_with_python_api()
